apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jdepend'
apply plugin: "jacoco"

checkstyle {
    toolVersion = "6.11.2"
    sourceSets = [sourceSets.main]
    configFile = new File("${rootProject.projectDir}/buildSrc/checkstyle/eso_checks.xml")
}

findbugs {
    toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
    effort = "max"
    reportLevel = "high"
}

pmd {
    toolVersion = "5.4.0"
    consoleOutput = true
    sourceSets = [sourceSets.main]
    ruleSetFiles = rootProject.files('buildSrc/pmd/eso_ruleset.xml')
}

jdepend {
    toolVersion = "2.9.1"
    sourceSets = [sourceSets.main]
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

ext {
    limits = [
            'instruction': 90,
            'branch'     : 90,
            'line'       : 90,
            'complexity' : 90,
            'method'     : 90,
            'class'      : 90
    ]
    jacocoExcludes = []
}

// See: https://issues.gradle.org/browse/GRADLE-2783
// See: https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        })
    }
    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            if (it) {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            }
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if ((it.value != null) && (it.value < limit)) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else {
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}
check.dependsOn jacocoTestReport